import random
import os
import sys


cards = {"A": 11, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, "J": 10, "Q": 10, "K": 10}


def house_rules():
    read_rules = input("Would you like to read the House Rules? Type 'y' or 'n': ").lower()
    while read_rules not in ['y', 'n']:
        read_rules = input("Please type either 'y' or 'n': ").lower()
    if read_rules == 'y':
        rules = "\n*** Blackjack House Rules ***\n\nThe deck is unlimited in size\nJacks, Queens, and Kings all count "\
                "as 10 points\nAces can count as 11 or 1 depending on your hand value\nThe rest of the cards are " \
                "worth their face value.\nThere are no Jokers\nAll cards have an equal probability of being drawn\n" \
                "Cards are not removed from the deck as they are drawn\nThe computer is the dealer\nIf either the " \
                "player or the dealer exceed 21 points, it is an automatic loss\nTry to get as close as you can to " \
                "21 points without going over in order to win"
        return rules
    else:
        return ""


def deal_card(hand, score):
    """
    Function chooses a random card, value pair from `cards` dictionary and adds it to the specified hand.
    :param hand: the list to append the card to
    :param score: the score that the card value gets added to
    :return: returns revised hand and score of that hand
    """
    card, value = random.choice(list(cards.items()))
    hand.append(card)
    score += value
    return hand, score


def is_blackjack(p_score, d_score):
    """
    Function checks to see if blackjack (21) points has been achieved. Dealer has precedence in blackjack.
    If both dealer and player have blackjack, dealer still wins.
    :param p_score: player score
    :param d_score: dealer score
    :return: Message if blackjack has been achieved (distinct messages for player and dealer,
    and an empty string if blackjack has not been achieved
    """
    if d_score == 21:
        check = "d-blackjack"
    elif p_score == 21:
        check = "p-blackjack"
    else:
        check = ""
    return check


def convert_ace(hand, score, ace_counter):
    """
    Function checks to see if a hand is over 21 and has an "A" card. If both conditions are true, the
    value of the "A" card is decreased from 11 to 1.
    :param hand: the hand to check for "A"
    :param score: the score to check if over 21
    :param ace_counter: checks to see if aces have already been converted before adjusting score
    :return: adjusted score, adjusted ace_counter
    """
    if "A" in hand and score > 21 and hand.count("A") > ace_counter:
        score -= 10
        ace_counter += 1
    return score, ace_counter


def instant_loss(hand_owner, hand, score):
    """
    Function evaluates is a particular hand has exceeded 21, thus causing an instant loss
    :param hand_owner: the owner of the hand (either dealer or player)
    :param hand: cards
    :param score: card scores
    :return: the message generated by the if statement
    """
    if score > 21 and hand_owner == "player":
        message = f"\nYour hand is {hand}, current score is {score}\nYou've exceeded 21 points\n\nYOU LOSE!"
    elif score > 21 and hand_owner == "dealer":
        message = f"\nComputer's hand is {hand}, current score is {score}\nComputer has exceeded 21 points\n\nYOU WIN!"
    else:
        message = "continue"
    return message


def calculate_winner(player_hand, player_score, dealer_hand, dealer_score):
    """
    Function weighs player score vs. dealer scores and determines whether player has won, lost,
    or if game is a draw
    :param player_hand: player hand
    :param player_score: player score value
    :param dealer_hand: dealer hand
    :param dealer_score: dealer score value
    :return: message corresponding to player win, player loss,or tie
    """
    if player_score == dealer_score:
        message = f"Your hand {player_hand}, current score: {player_score}\nComputer's hand {dealer_hand}, current score: {dealer_score}\nIt's a tie!\n\nGAME ENDS IN A DRAW!"
    elif dealer_score > player_score:
        message = f"Your hand {player_hand}, current score: {player_score}\nComputer's hand {dealer_hand}, current score: {dealer_score}\nComputer wins with {dealer_score}!\n\nYOU LOSE!"
    else:
        message = f"Your hand {player_hand}, current score: {player_score}\nComputer's hand {dealer_hand}, current score: {dealer_score}\nYou win with a score of {player_score}!\n\nYOU'RE THE WINNER!"
    return message


def clear():
    """
    Clears console
    """
    os.system('cls')


def yes_or_no():
    """
    Asks player if they would like another card; will not accept values other than 'y' or 'n'
    :return: returns player answer (either 'y' or 'n')
    """
    answer = input("Would you like another card? Type 'y' or 'n': ").lower()
    while answer != 'y' and answer != 'n':
        answer = input("Please enter either 'y' or 'n': ").lower()
    return answer


def replay():
    """
    Asks player if they would like to play again; only accepts valid answers
    :return: closes program if player does not want to play again
    """
    another_round = input("\nWould you like to play again? Type 'y' or 'n': ").lower()
    while another_round != 'y' and another_round != 'n':
        another_round = input("Please pick either 'y' or 'n': ").lower()

    if another_round == 'n':
        return sys.exit("Thank you for playing!")
    else:
        return
